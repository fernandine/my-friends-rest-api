Após eu publicar como podemos ser produtivos no desenvolvimento de APIs Rest com Spring Boot, algumas pessoas me pediram para criar um projeto contemplando o padrão que é mais utilizado em grande parte dos projetos corporativos e como compreender as camadas de uma aplicação.

Para ilustrar eu criei esta aplicação para ilustrar o cadastros de amigos, email e telefones realizando operações como:



Recursos:



POST : friends - > Adicionar um friend

PUT : friends/1 -> Altera um friend pelo ID

DELETE : friends/1 -> Remove um friend pelo ID

GET : friends -> Lista todos os friends

GET : friends/1 -> Busca um friend por ID

GET : friends/1/address -> Localiza o address de um friend

PATCH : friends/1/address -> Altera o address de um friend

GET : friends/search?name=GLEYSON&page=0&size=3 -> Lista todos os friends com filtro e paginação



Camadas:



config: configuração e beans manuais do projeto como Model Mapper e Open API



1. infra: configuração do recusos comuns da aplicação como exceções globais

2. model: classes de modelo da aplicação

3. dto: camada de tráfego de dados da aplicação

4. repository: recursos de acesso a dados em uma base relacional da aplicação

5. service: camada de regra de negócios da aplicação

6. controller: serviços http baseados na arquitetura REST



Etapas:



1. Diagrame o modelo do teu projeto com UML

2. Estude as principais anotações em JPA

3. Conheça as principais anotações do Spring Boot Core e Web

4. Revise os conceitos de MVC

5. Implemente a API com o nível de maturidade das APIs REST.

6. Estude sobre Hibernate / Spring Data JPA e Paginação



Você pode usar esta API para também praticar e evoluir seus conhecimentos em frontend comunicando-se com banckend via REST.



Bons estudos



Link do github: https://lnkd.in/dphzMgKc



#digytal #java #spring #rest #api